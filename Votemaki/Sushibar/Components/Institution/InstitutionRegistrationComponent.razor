@inject IJSRuntime jsRuntime
<h3>@_localizer["title"]</h3>

<Sushibar.Components.Util.TemakiSnackbar @ref="_temakiSnackbar" />

<Validations Mode="ValidationMode.Auto" ValidateOnLoad="false" Model="@institution">
    <Validation>
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.Is2">@_localizer["institutionNameDisplayName"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is10">
                <TextEdit Placeholder=@_localizer["institutionNamePlaceHolder"] @bind-Text="@institution.Name">
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation>
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.Is2">@_localizer["addressDisplayName"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is10">
                <TextEdit Placeholder=@_localizer["addressPlaceHolder"] @bind-Text="@institution.Address">
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
</Validations>

<ul>
    @foreach (var region in institution.Regions ??= new List<Region>())
    {
        <li>@region.RegionName
            <Button Color="Color.Danger" @onclick="@(async ()=> await deleteRegionAsync(region))">
                <Icon Name="IconName.TimesCircle" />
            </Button>
            </li> 
    }
</ul>


<MemoEdit Rows="5" Text="@institution.Description" MaxLength="500" TextChanged="@onDescriptionChange" Placeholder="@_localizer["descriptionPH"]" />

<Divider></Divider>

<Button Color="Color.Primary" Block="true" @onclick="@(async () => await saveInstitution())">
    <Icon Name="IconName.Save" />
    @_localizer["saveInstitutionBtn"]
</Button>
<Divider></Divider>


<Addons>
    <Addon AddonType="AddonType.Body">
        <TextEdit Placeholder="@_localizer["regionPH"]" @bind-Text="@regionToAddName" Casing="@CharacterCasing.Upper" />
    </Addon>
    <Addon AddonType="AddonType.End">
        <Button Color="Color.Secondary" Disabled="@string.IsNullOrEmpty(regionToAddName)" @onclick="@(async () => await addRegion())">
            <Icon Name="IconName.Add" />
            @_localizer["addRegionBtn"]
        </Button>
    </Addon>
</Addons>

@code {
    [Inject] private IStringLocalizer<InstitutionRegistrationComponent> _localizer { get; set; }
    [Inject] private Votemaki.Core.IRepository.IInstitutionRepository institutionRepository { get; set; }
    [Inject] private Votemaki.Core.IRepository.IRegionRepository regionRepository { get; set; }

    private string regionToAddName = "";

    Sushibar.Components.Util.TemakiSnackbar _temakiSnackbar = new Util.TemakiSnackbar();
    private Institution institution { get; set; } = new Institution();

    protected override async Task OnInitializedAsync()
    {
        try
        {

            institution = (await institutionRepository.GetFirst());
            institution ??= new Institution();

        }
        catch (Exception e)
        {
            await jsRuntime.InvokeAsync<string>("console.log", e.Message);

            await _temakiSnackbar.InformError(_localizer["errorGettingData"]);

        }
    }

    private async Task deleteRegionAsync(Region region)
    {

        try
        {
            if (region.Id != Guid.Empty)
            {
                await regionRepository.DeleteAsync(region.Id);

            }

            institution.Regions = institution.Regions.Where(r=>r!=region);
            await _temakiSnackbar.InformSuccess(_localizer["successDeletingRegion"]);
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeAsync<string>("console.log", ex.Message);

            await _temakiSnackbar.InformError(_localizer["errorDeletingRegion"]);
        }
    }

    private async Task addRegion()
    {
        try
        {
            regionToAddName = regionToAddName.ToUpper();
            if (institution.Regions.Any(r => r.RegionName == regionToAddName))
            {

                regionToAddName = "";
                await _temakiSnackbar.InformError(_localizer["repeatedNameRegion"]);
                return;
            }

            institution.Regions = institution.Regions.Append(new Region()
            {
                RegionName = regionToAddName
            }).ToList();

            regionToAddName = "";
            await _temakiSnackbar.InformSuccess(_localizer["successAddingRegion"]);
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeAsync<string>("console.log", ex.Message);

            await _temakiSnackbar.InformError(_localizer["errorAddingRegion"]);
        }
    }


    private async Task saveInstitution()
    {
        Snackbar snackbar;
        try
        {
            if (institution.Id == Guid.Empty)
            {
                await institutionRepository.AddAsync(institution);
                await _temakiSnackbar.InformSuccess(_localizer["successSave"]);

            }
            else
            {
                await institutionRepository.UpdateAsync(institution);
                await _temakiSnackbar.InformSuccess(_localizer["successUpdate"]);

            }
        }
        catch (Exception e)
        {
            await _temakiSnackbar.InformError(_localizer["errorSaveData"]);

        }
    }

    private void onDescriptionChange(string value)
    {

        institution.Description = value.Substring(0, value.Length > 500 ? 500 : value.Length);
    }


}
